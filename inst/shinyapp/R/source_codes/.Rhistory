print(ggplot(roc,aes(x,y))+geom_line(linetype = linetype[1],color="blue",size=1)+theme_bw()+labs(y="True positive rate", x="False positive rate")
+geom_abline(intercept=0,slope=1,lty=2))
return(roc)
}
roc<-get_roc_prob(d)
get_roc_prob<-function(d,positive_class="1",negative_class="0",linetype=c("solid","dashed", "dotted", "dotdash", "longdash", "twodash")){
# functions to compute true and false positive rates
TPR <- function(d, th){ sum(d$class==positive_class & d$probability>=th) / sum(d$class==positive_class)}
FPR <- function(d, th){ sum(d$class==negative_class & d$probability>=th) / sum(d$class==negative_class)}
# use all the sorted values are possible threshods
thresholds <- sort(d$probability) #seq(0,1,0.1) #
# thresholds<-unique(thresholds)
roc <- data.frame(y=sapply(thresholds, function(th){TPR(d,th)}),
x=sapply(thresholds, function(th){FPR(d,th)}) )
roc<-roc[order(roc$x,roc$y),]
print(ggplot(roc,aes(x,y))+geom_line(linetype = linetype[1],color="blue",size=1)+theme_bw()+labs(y="True positive rate", x="False positive rate")
+geom_abline(intercept=0,slope=1,lty=2))
return(roc)
}
roc<-get_roc_prob(d)
get_roc_prob<-function(d,positive_class="1",negative_class="0",line.size=1,line.color="blue",line.type=c("solid","dashed", "dotted", "dotdash", "longdash", "twodash")){
# functions to compute true and false positive rates
TPR <- function(d, th){ sum(d$class==positive_class & d$probability>=th) / sum(d$class==positive_class)}
FPR <- function(d, th){ sum(d$class==negative_class & d$probability>=th) / sum(d$class==negative_class)}
# use all the sorted values are possible threshods
thresholds <- sort(d$probability) #seq(0,1,0.1) #
# thresholds<-unique(thresholds)
roc <- data.frame(y=sapply(thresholds, function(th){TPR(d,th)}),
x=sapply(thresholds, function(th){FPR(d,th)}) )
roc<-roc[order(roc$x,roc$y),]
print(ggplot(roc,aes(x,y))+geom_line(linetype = linetype[1],color=line.color,size=line.size)+theme_bw()+labs(y="True positive rate", x="False positive rate")
+geom_abline(intercept=0,slope=1,lty=2))
return(roc)
}
roc<-get_roc_prob(d)
get_roc_prob<-function(d,positive_class="1",negative_class="0",line.size=1,line.color="blue",line.type=c("solid","dashed", "dotted", "dotdash", "longdash", "twodash")){
# functions to compute true and false positive rates
TPR <- function(d, th){ sum(d$class==positive_class & d$probability>=th) / sum(d$class==positive_class)}
FPR <- function(d, th){ sum(d$class==negative_class & d$probability>=th) / sum(d$class==negative_class)}
# use all the sorted values are possible threshods
thresholds <- sort(d$probability) #seq(0,1,0.1) #
# thresholds<-unique(thresholds)
roc <- data.frame(y=sapply(thresholds, function(th){TPR(d,th)}),
x=sapply(thresholds, function(th){FPR(d,th)}) )
roc<-roc[order(roc$x,roc$y),]
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+theme_bw()+labs(y="True positive rate", x="False positive rate")
+geom_abline(intercept=0,slope=1,lty=2))
return(roc)
}
roc<-get_roc_prob(d)
require(pracma)
trapz
library(pracma)
install.packages("pracma")
library(pracma)
trapz
trapz(roc[,c(2,1)])
roc
head(roc)
trapz(x=roc[,2],y=roc[,1])
per
perf
performance(pred,"auc")
p1<-performance(pred,"auc")
p1
p1@x.values
p1@y.values
auc_val<-trap(x=roc$x,y=roc$y)
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+theme_bw()+
labs(y="True positive rate", x="False positive rate",main=paste("AUC ",auc_val,sep=""))
+geom_abline(intercept=0,slope=1,lty=2))
get_roc_prob<-function(d,positive_class="1",negative_class="0",line.size=1,line.color="blue",line.type=c("solid","dashed", "dotted", "dotdash", "longdash", "twodash")){
# functions to compute true and false positive rates
TPR <- function(d, th){ sum(d$class==positive_class & d$probability>=th) / sum(d$class==positive_class)}
FPR <- function(d, th){ sum(d$class==negative_class & d$probability>=th) / sum(d$class==negative_class)}
# use all the sorted values are possible threshods
thresholds <- sort(d$probability) #seq(0,1,0.1) #
# thresholds<-unique(thresholds)
roc <- data.frame(y=sapply(thresholds, function(th){TPR(d,th)}),
x=sapply(thresholds, function(th){FPR(d,th)}) )
roc<-roc[order(roc$x,roc$y),]
auc_val<-trapz(x=roc$x,y=roc$y)
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+theme_bw()+
labs(y="True positive rate", x="False positive rate",main=paste("AUC ",auc_val,sep=""))
+geom_abline(intercept=0,slope=1,lty=2))
return(roc)
}
roc<-get_roc_prob(d)
get_roc_prob<-function(d,positive_class="1",negative_class="0",line.size=1,line.color="blue",line.type=c("solid","dashed", "dotted", "dotdash", "longdash", "twodash")){
# functions to compute true and false positive rates
TPR <- function(d, th){ sum(d$class==positive_class & d$probability>=th) / sum(d$class==positive_class)}
FPR <- function(d, th){ sum(d$class==negative_class & d$probability>=th) / sum(d$class==negative_class)}
# use all the sorted values are possible threshods
thresholds <- sort(d$probability) #seq(0,1,0.1) #
# thresholds<-unique(thresholds)
roc <- data.frame(y=sapply(thresholds, function(th){TPR(d,th)}),
x=sapply(thresholds, function(th){FPR(d,th)}) )
roc<-roc[order(roc$x,roc$y),]
auc_val<-trapz(x=roc$x,y=roc$y)
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+theme_bw()+
labs(y="True positive rate", x="False positive rate",title=paste("AUC ",auc_val,sep=""))
+geom_abline(intercept=0,slope=1,lty=2))
return(roc)
}
roc<-get_roc_prob(d)
get_roc_prob<-function(d,positive_class="1",negative_class="0",line.size=1,line.color="blue",line.type=c("solid","dashed", "dotted", "dotdash", "longdash", "twodash")){
# functions to compute true and false positive rates
TPR <- function(d, th){ sum(d$class==positive_class & d$probability>=th) / sum(d$class==positive_class)}
FPR <- function(d, th){ sum(d$class==negative_class & d$probability>=th) / sum(d$class==negative_class)}
# use all the sorted values are possible threshods
thresholds <- sort(d$probability) #seq(0,1,0.1) #
# thresholds<-unique(thresholds)
roc <- data.frame(y=sapply(thresholds, function(th){TPR(d,th)}),
x=sapply(thresholds, function(th){FPR(d,th)}) )
roc<-roc[order(roc$x,roc$y),]
auc_val<-round(trapz(x=roc$x,y=roc$y),3)
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+theme_bw()+
labs(y="True positive rate", x="False positive rate",title=paste("ROC curve (AUC: ",auc_val,")",sep=""))
+geom_abline(intercept=0,slope=1,lty=2))
return(roc)
}
roc<-get_roc_prob(d)
#get_roc_prob: function to generate ROC curve and calculate AUC based on the given class prediction probabilities and true class labels
#d: data frame with two columns (class: 0 or 1 labels; probability: prediction probability assigned by the classifier)
#positive_class: label of the positive/yes class
#negative_class: label of the negative/no class
#line.size: size/thickness of the ROC curve
#line.color: color of the ROC curve
#line.type: line type of the ROC curve c("solid","dashed", "dotted", "dotdash", "longdash", "twodash")
get_roc_prob<-function(d,positive_class="1",negative_class="0",line.size=1,line.color="blue",
line.type=c("solid","dashed", "dotted", "dotdash", "longdash", "twodash")){
# functions to compute true and false positive rates
TPR <- function(d, th){ sum(d$class==positive_class & d$probability>=th) / sum(d$class==positive_class)}
FPR <- function(d, th){ sum(d$class==negative_class & d$probability>=th) / sum(d$class==negative_class)}
# use all the sorted values are possible threshods
thresholds <- sort(d$probability) #seq(0,1,0.1) #
# thresholds<-unique(thresholds)
roc <- data.frame(y=sapply(thresholds, function(th){TPR(d,th)}),
x=sapply(thresholds, function(th){FPR(d,th)}) )
roc<-roc[order(roc$x,roc$y),]
auc_val<-round(trapz_auc(x=roc$x,y=roc$y),3)
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+theme_bw()+
labs(y="True positive rate", x="False positive rate",title=paste("ROC curve (AUC: ",auc_val,")",sep=""))
+geom_abline(intercept=0,slope=1,lty=2)+theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold")
))
return(roc)
}
roc<-get_roc_prob(d)
trapz_auc<-trapz
#get_roc_prob: function to generate ROC curve and calculate AUC based on the given class prediction probabilities and true class labels
#d: data frame with two columns (class: 0 or 1 labels; probability: prediction probability assigned by the classifier)
#positive_class: label of the positive/yes class
#negative_class: label of the negative/no class
#line.size: size/thickness of the ROC curve
#line.color: color of the ROC curve
#line.type: line type of the ROC curve c("solid","dashed", "dotted", "dotdash", "longdash", "twodash")
get_roc_prob<-function(d,positive_class="1",negative_class="0",line.size=1,line.color="blue",
line.type=c("solid","dashed", "dotted", "dotdash", "longdash", "twodash")){
# functions to compute true and false positive rates
TPR <- function(d, th){ sum(d$class==positive_class & d$probability>=th) / sum(d$class==positive_class)}
FPR <- function(d, th){ sum(d$class==negative_class & d$probability>=th) / sum(d$class==negative_class)}
# use all the sorted values are possible threshods
thresholds <- sort(d$probability) #seq(0,1,0.1) #
# thresholds<-unique(thresholds)
roc <- data.frame(y=sapply(thresholds, function(th){TPR(d,th)}),
x=sapply(thresholds, function(th){FPR(d,th)}) )
roc<-roc[order(roc$x,roc$y),]
auc_val<-round(trapz_auc(x=roc$x,y=roc$y),3)
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+theme_bw()+
labs(y="True positive rate", x="False positive rate",title=paste("ROC curve (AUC: ",auc_val,")",sep=""))
+geom_abline(intercept=0,slope=1,lty=2)+theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold")
))
return(roc)
}
roc<-get_roc_prob(d)
get_roc_prob<-function(d,positive_class="1",negative_class="0",line.size=1,line.color="blue",
line.type=c("solid","dashed", "dotted", "dotdash", "longdash", "twodash")){
# functions to compute true and false positive rates
TPR <- function(d, th){ sum(d$class==positive_class & d$probability>=th) / sum(d$class==positive_class)}
FPR <- function(d, th){ sum(d$class==negative_class & d$probability>=th) / sum(d$class==negative_class)}
# use all the sorted values are possible threshods
thresholds <- sort(d$probability) #seq(0,1,0.1) #
# thresholds<-unique(thresholds)
roc <- data.frame(y=sapply(thresholds, function(th){TPR(d,th)}),
x=sapply(thresholds, function(th){FPR(d,th)}) )
roc<-roc[order(roc$x,roc$y),]
auc_val<-round(trapz_auc(x=roc$x,y=roc$y),3)
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+theme_bw()+
labs(y="True positive rate", x="False positive rate",title=paste("ROC curve (AUC: ",auc_val,")",sep=""))
+geom_abline(intercept=0,slope=1,lty=2)+theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
xlab=element_text(color="black", size=14),
ylab=element_text(color="black", size=14)
))
return(roc)
}
roc<-get_roc_prob(d)
get_roc_prob<-function(d,positive_class="1",negative_class="0",line.size=1,line.color="blue",
line.type=c("solid","dashed", "dotted", "dotdash", "longdash", "twodash")){
# functions to compute true and false positive rates
TPR <- function(d, th){ sum(d$class==positive_class & d$probability>=th) / sum(d$class==positive_class)}
FPR <- function(d, th){ sum(d$class==negative_class & d$probability>=th) / sum(d$class==negative_class)}
# use all the sorted values are possible threshods
thresholds <- sort(d$probability) #seq(0,1,0.1) #
# thresholds<-unique(thresholds)
roc <- data.frame(y=sapply(thresholds, function(th){TPR(d,th)}),
x=sapply(thresholds, function(th){FPR(d,th)}) )
roc<-roc[order(roc$x,roc$y),]
auc_val<-round(trapz_auc(x=roc$x,y=roc$y),3)
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+theme_bw()+
labs(y="True positive rate", x="False positive rate",title=paste("ROC curve (AUC: ",auc_val,")",sep=""))
+geom_abline(intercept=0,slope=1,lty=2)+theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.lab.x=element_text(color="black", size=14),
axis.lab.y=element_text(color="black", size=14)
))
return(roc)
}
roc<-get_roc_prob(d)
get_roc_prob<-function(d,positive_class="1",negative_class="0",line.size=1,line.color="blue",
line.type=c("solid","dashed", "dotted", "dotdash", "longdash", "twodash")){
# functions to compute true and false positive rates
TPR <- function(d, th){ sum(d$class==positive_class & d$probability>=th) / sum(d$class==positive_class)}
FPR <- function(d, th){ sum(d$class==negative_class & d$probability>=th) / sum(d$class==negative_class)}
# use all the sorted values are possible threshods
thresholds <- sort(d$probability) #seq(0,1,0.1) #
# thresholds<-unique(thresholds)
roc <- data.frame(y=sapply(thresholds, function(th){TPR(d,th)}),
x=sapply(thresholds, function(th){FPR(d,th)}) )
roc<-roc[order(roc$x,roc$y),]
auc_val<-round(trapz_auc(x=roc$x,y=roc$y),3)
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+theme_bw()+
labs(y="True positive rate", x="False positive rate",title=paste("ROC curve (AUC: ",auc_val,")",sep=""))
+geom_abline(intercept=0,slope=1,lty=2)+theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.text.x=element_text(color="black", size=14),
axis.text.y=element_text(color="black", size=14)
))
return(roc)
}
roc<-get_roc_prob(d)
cutpointr
library(cutpointr)
cutpoint
?cutpoint
cutpoint(roc$y)
cutpoint(roc$y,roc$x)
cutpointr(roc$y,roc$x)
cutpointr(roc$y,)
cutpointr
UseMethod("cutpointr")
?cutpointr
print(paste("95% CI: ",confint_lower1,",",confint_upper1,sep=""))
[1] "95% CI: 0.81,0.82"
>
>
> print(summary(unlist(bres1)))
Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
0.310   0.730   0.820   0.817   0.920   1.000
library(fbroc)
y <- rep(c(TRUE, FALSE), each = 500)
x <- rnorm(1000) + y
result.boot <- boot.roc(x, y)
install.packages("fbroc")
library(fbroc)
y <- rep(c(TRUE, FALSE), each = 500)
x <- rnorm(1000) + y
result.boot <- boot.roc(x, y)
plot(result.boot)
dim(results.boot)
dim(result.boot)
result.boot$predictions
result.boot$roc
result.boot$roc[[1]]
result.boot$roc[[2]]
result.boot$roc[[3]]
result.boot$roc[[4]]
length(result.boot)
result.boot$roc[[4]]
result.boot$roc
result.boot$roc[[1]]
result.boot$roc[[1]][1:3]
result.boot$roc[[2]][1:3]
result.boot$roc[[3]][1:3]
head(result.boot$roc)
dim(result.boot)
result.boot$predictions
result.boot$n.boot
dim(d)
d[1:3,]
r1
r1<-runif(0,1,n=200)
length(r1)
d1<-cbind(d,r1)
r1<-runif(0,1,n=200)
r2<-runif(0,1,n=200)
r3<-runif(0,1,n=200)
d1<-cbind(d,r1,r2,r3)
dim(d1)
dorig<-d
d=d1
roc_mat<-{}
cnames<-colnames(d)
cnames<-tolower(cnames)
d1<-d[,-c(grep(cnames,pattern="*class$"))]
#for(i in 1:dim(d1)[2]){
roc_res_list<-lapply(1:dim(d1)[2],function(i){
tempd<-cbind(d1[,i],d[,grep(cnames,pattern="*class$")])
tempd<-as.data.frame(tempd)
colnames(tempd)<-c("probability","class")
thresholds <- sort(tempd$probability)
roc <- data.frame(y=sapply(thresholds, function(th){TPR(tempd,th)}),
x=sapply(thresholds, function(th){FPR(tempd,th)}))
return(roc)
})
positive_class<-"1"
negative_class<-"0"
roc_mat<-{}
cnames<-colnames(d)
cnames<-tolower(cnames)
d1<-d[,-c(grep(cnames,pattern="*class$"))]
#for(i in 1:dim(d1)[2]){
roc_res_list<-lapply(1:dim(d1)[2],function(i){
tempd<-cbind(d1[,i],d[,grep(cnames,pattern="*class$")])
tempd<-as.data.frame(tempd)
colnames(tempd)<-c("probability","class")
thresholds <- sort(tempd$probability)
roc <- data.frame(y=sapply(thresholds, function(th){TPR(tempd,th)}),
x=sapply(thresholds, function(th){FPR(tempd,th)}))
return(roc)
})
roc_res_list[[1]]
roc_res_list[[2]]
y
y<-roc_res_list$y
length(y)
y<-ldply(roc_res_list,cbind)
library(plyr)
y<-ldply(roc_res_list,cbind)
dim(y)
y[1:3,]
y<-ldply(roc_res_list,c)
y<-ldply(roc_res_list,cbind)
y<-ldply(roc_res_list,cbind)
dim(y)
y[201,]
roc_res_list[[2]][1:3,]
y[201:203,]
y<-ldply(roc_res_list,function(x){cbind(x[,1])})
dim(y)
head(y)
y<-ldply(roc_res_list,function(x){cbind(t(x[,1])})
y<-ldply(roc_res_list,function(x){cbind(t(x[,1]))})
head(y)
dim(y)
y[,1:4]
roc_res_list[[1]][1:4]
roc_res_list[[1]][1:4,]
roc_res_list[[3]][1:4,]
roc_res_list[[4]][1:4,]
y<-ldply(roc_res_list,function(x){cbind(t(x[,1]))})
x<-ldply(roc_res_list,function(x){cbind(t(x[,2]))})
y<-t(y)
x<-t(x)
dim(y)
dim(x)
yerror <- apply(y,1,function(y){qnorm(0.975)*sd(y,na.rm=TRUE)/sqrt(dim(d1)[2])})
ymean <- apply(y,1,function(y){mean(y,na.rm=TRUE)})
xmean <- apply(x,1,function(x){mean(x,na.rm=TRUE)})
ymin<-ymean-yerror
ymax<-ymean+yerror
roc<-cbind(ymean,xmean)
roc<-as.data.frame(roc)
colnames(roc)<-c("y","x")
roc<-roc[order(roc$x,roc$y),]
auc_val<-round(trapz_auc(x=roc$x,y=roc$y),3)
auc_val
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+
geom_ribbon(aes(ymin=ymin, ymax=ymax), alpha=0.2)
+theme_bw()+
labs(y="True positive rate", x="False positive rate",title=paste("ROC curve (AUC: ",auc_val,")",sep=""))
+geom_abline(intercept=0,slope=1,lty=2)+theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.text.x=element_text(color="black", size=14),
axis.text.y=element_text(color="black", size=14)
))
line.type="solid"
line.color="blue"
line.size=1
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+
geom_ribbon(aes(ymin=ymin, ymax=ymax), alpha=0.2)
+theme_bw()+
labs(y="True positive rate", x="False positive rate",title=paste("ROC curve (AUC: ",auc_val,")",sep=""))
+geom_abline(intercept=0,slope=1,lty=2)+theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.text.x=element_text(color="black", size=14),
axis.text.y=element_text(color="black", size=14)
))
roc1<-cbind(ymin,xmean)
roc2<-cbind(ymax,xmean)
roc1<-roc1[order(roc$x,roc$y),]
roc2<-roc2[order(roc$x,roc$y),]
auc_val<-round(trapz_auc(x=roc$x,y=roc$y),3)
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+
geom_ribbon(aes(ymin=roc1[,1], ymax=roc2[,1]), alpha=0.2)
+theme_bw()+
labs(y="True positive rate", x="False positive rate",title=paste("ROC curve (AUC: ",auc_val,")",sep=""))
+geom_abline(intercept=0,slope=1,lty=2)+theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.text.x=element_text(color="black", size=14),
axis.text.y=element_text(color="black", size=14)
))
head(roc1)
head(roc)
y<-ldply(roc_res_list,function(x){cbind(t(x[,1]))})
x<-ldply(roc_res_list,function(x){cbind(t(x[,2]))})
y<-t(y)
x<-t(x)
yerror <- apply(y,1,function(y){qnorm(0.975)*sd(y,na.rm=TRUE)/sqrt(dim(d1)[2])})
ymean <- apply(y,1,function(y){mean(y,na.rm=TRUE)})
xmean <- apply(x,1,function(x){mean(x,na.rm=TRUE)})
ymin<-ymean-yerror
ymax<-ymean+yerror
roc<-cbind(ymean,xmean)
roc<-as.data.frame(roc)
colnames(roc)<-c("y","x")
roc<-roc[order(roc$x,roc$y),]
roc1<-cbind(ymin,xmean)
roc2<-cbind(ymax,xmean)
roc1<-roc1[order(roc$x,roc$y),]
roc2<-roc2[order(roc$x,roc$y),]
head(roc)
head(roc1)
head(roc2)
roc1<-roc1[order(roc$x,roc$y),]
roc<-cbind(ymean,xmean)
roc<-as.data.frame(roc)
colnames(roc)<-c("y","x")
roc1<-cbind(ymin,xmean)
roc2<-cbind(ymax,xmean)
roc1<-roc1[order(roc$x,roc$y),]
roc2<-roc2[order(roc$x,roc$y),]
roc<-roc[order(roc$x,roc$y),]
head(roc1)
head(roc2)
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+
geom_ribbon(aes(ymin=roc1[,1], ymax=roc2[,1]), alpha=0.2)
+theme_bw()+
labs(y="True positive rate", x="False positive rate",title=paste("ROC curve (AUC: ",auc_val,")",sep=""))
+geom_abline(intercept=0,slope=1,lty=2)+theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.text.x=element_text(color="black", size=14),
axis.text.y=element_text(color="black", size=14)
))
y<-ldply(roc_res_list,function(x){cbind(t(x[,1]))})
x<-ldply(roc_res_list,function(x){cbind(t(x[,2]))})
y<-t(y)
x<-t(x)
yerror <- apply(y,1,function(y){qnorm(0.975)*sd(y,na.rm=TRUE)/sqrt(dim(d1)[2])})
ymean <- apply(y,1,function(y){mean(y,na.rm=TRUE)})
xerror <- apply(x,1,function(x){qnorm(0.975)*sd(x,na.rm=TRUE)/sqrt(dim(d1)[2])})
xmean <- apply(x,1,function(x){mean(x,na.rm=TRUE)})
ymin<-ymean-yerror
ymax<-ymean+yerror
xmin<-xmean-yerror
xmax<-xmean+yerror
roc<-cbind(ymean,xmean)
roc<-as.data.frame(roc)
colnames(roc)<-c("y","x")
roc1<-cbind(ymin,xmin)
roc2<-cbind(ymax,xmax)
roc1<-roc1[order(roc$x,roc$y),]
roc2<-roc2[order(roc$x,roc$y),]
roc<-roc[order(roc$x,roc$y),]
auc_val<-round(trapz_auc(x=roc$x,y=roc$y),3)
print(ggplot(roc,aes(x,y))+geom_line(linetype = line.type[1],color=line.color,size=line.size)+
geom_ribbon(aes(ymin=roc1[,1], ymax=roc2[,1],xmin=roc1[,2],xmax=roc2[,2]), alpha=0.2)
+theme_bw()+
labs(y="True positive rate", x="False positive rate",title=paste("ROC curve (AUC: ",auc_val,")",sep=""))
+geom_abline(intercept=0,slope=1,lty=2)+theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.text.x=element_text(color="black", size=14),
axis.text.y=element_text(color="black", size=14)
))
head(roc1)
head(roc2)
roc<-cbind(roc,roc1,roc2)
head(roc)
ggplot(crossed, aes(year, percentage,group=ID))+geom_line(show.legend = FALSE) +facet_wrap(~ cause)
View(roc)
